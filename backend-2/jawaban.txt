SOAL
========
1.	Tampilkan seluruh data dari tabel "employees" (5 Points)
2.	Berapa banyak karyawan yang memiliki posisi pekerjaan (job title) "Manager"? (5 Points)
3.	Tampilkan daftar nama dan gaji (salary) dari karyawan yang bekerja di departemen "Sales" atau "Marketing" (10 Points)
4.	Hitung rata-rata gaji (salary) dari karyawan yang bergabung (joined) dalam 5 tahun terakhir (berdasarkan kolom "joined_date") (10 Points)
5.	Tampilkan 5 karyawan dengan total penjualan (sales) tertinggi dari tabel "employees" dan "sales_data" (10 Points)
6.	Tampilkan nama, gaji (salary), dan rata-rata gaji (salary) dari semua karyawan yang bekerja di departemen yang memiliki rata-rata gaji lebih tinggi dari gaji rata-rata di semua departemen (15 Points)
7.	Tampilkan nama dan total penjualan (sales) dari setiap karyawan, bersama dengan peringkat (ranking) masing-masing karyawan berdasarkan total penjualan. Peringkat 1 adalah karyawan dengan total penjualan tertinggi (25 Points)
8.	Buat sebuah stored procedure yang menerima nama departemen sebagai input, dan mengembalikan daftar karyawan dalam departemen tersebut bersama dengan total gaji (salary) yang mereka terima (20 Points)

JAWAB
========
1. SELECT * FROM employees
2. SELECT count(job_title) AS total_manager FROM employees WHERE job_title='Manager'
3. SELECT name, salary FROM employees WHERE department='Sales' OR department='Marketing'
4. SELECT AVG(salary) AS average_salary FROM employees WHERE joined_date >= ( SELECT MAX(joined_date) - INTERVAL 5 YEAR FROM employees)
5. SELECT employees.name AS name, SUM(sales) AS sales_total from employees JOIN sales_data ON employees.employee_id = sales_data.employee_id GROUP BY employees.employee_id ORDER BY sales_total DESC LIMIT 5
6. SELECT e1.department, e1.name AS highest_salary_employee, e1.salary AS highest_salary, e2.average_salary FROM employees e1 INNER JOIN ( SELECT department, MAX(salary) AS max_salary FROM employees GROUP BY department ) e3 ON e1.department = e3.department AND e1.salary = e3.max_salary INNER JOIN ( SELECT department, AVG(salary) AS average_salary FROM employees GROUP BY department ) e2 ON e1.department = e2.department ORDER BY average_salary DESC LIMIT 1
7. SELECT employees.name AS name, SUM(sales) AS sales_total, RANK() OVER (ORDER BY SUM(sales) DESC) AS sales_rank FROM employees JOIN sales_data ON employees.employee_id = sales_data.employee_id GROUP BY employees.employee_id ORDER BY sales_total DESC;
8. 
DELIMITER //
CREATE PROCEDURE ProcGetNameAndSalary( DepartmentName VARCHAR(50))
BEGIN
    SELECT
        name,
        salary,
    FROM
        Employees
    WHERE
        department = DepartmentName;

END //
DELIMITER ; 
